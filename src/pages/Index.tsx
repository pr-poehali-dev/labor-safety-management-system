import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, SheetTrigger } from '@/components/ui/sheet';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import Icon from '@/components/ui/icon';

interface SensorData {
  id: string;
  name: string;
  location: string;
  value: number;
  unit: string;
  status: 'normal' | 'warning' | 'critical';
  lastUpdate: string;
}

interface AutoAlert {
  id: string;
  title: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  timestamp: string;
  location: string;
  status: 'active' | 'acknowledged' | 'resolved';
  autoGenerated: boolean;
}

interface ComplianceReport {
  id: string;
  title: string;
  type: 'daily' | 'weekly' | 'monthly';
  generatedAt: string;
  status: 'generated' | 'processing' | 'ready';
  compliance: number;
}

interface NotificationChannel {
  id: string;
  name: string;
  type: 'telegram' | 'sms' | 'email' | 'webhook';
  status: 'active' | 'inactive' | 'error';
  lastUsed: string;
  config: {
    endpoint?: string;
    recipients?: string[];
    template?: string;
  };
}

interface MLPrediction {
  id: string;
  type: 'incident_risk' | 'equipment_failure' | 'safety_trend';
  confidence: number;
  prediction: string;
  timeframe: string;
  factors: string[];
  createdAt: string;
}

interface Integration {
  id: string;
  name: string;
  type: '1c' | 'sap' | 'erp' | 'external_api';
  status: 'connected' | 'disconnected' | 'syncing';
  lastSync: string;
  dataExchanged: number;
}

interface UserRole {
  id: string;
  name: string;
  level: 'operator' | 'engineer' | 'manager' | 'admin';
  permissions: string[];
  dashboardConfig: {
    widgets: string[];
    alertLevel: 'all' | 'critical' | 'none';
    dataAccess: string[];
  };
}

interface User {
  id: string;
  name: string;
  email: string;
  avatar?: string;
  role: UserRole;
  isOnline: boolean;
  lastActivity: string;
}

interface QuickAction {
  id: string;
  title: string;
  description: string;
  type: 'emergency' | 'maintenance' | 'report' | 'notification';
  icon: string;
  requiresConfirmation: boolean;
  userLevels: string[];
}

const Index = () => {
  const [activeTab, setActiveTab] = useState('monitoring');
  const [isMobile, setIsMobile] = useState(false);
  const [currentUser, setCurrentUser] = useState<User>({
    id: '1',
    name: 'Александр Иванов',
    email: 'a.ivanov@ht-systems.ru',
    avatar: '/avatar-placeholder.jpg',
    role: {
      id: '1',
      name: 'Главный инженер',
      level: 'admin',
      permissions: ['view_all', 'edit_all', 'manage_users', 'system_config'],
      dashboardConfig: {
        widgets: ['monitoring', 'alerts', 'analytics', 'reports'],
        alertLevel: 'all',
        dataAccess: ['all_sensors', 'all_departments', 'financial_data']
      }
    },
    isOnline: true,
    lastActivity: '2024-01-28 14:30:00'
  });

  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  const [realTimeData, setRealTimeData] = useState<SensorData[]>([
    {
      id: '1',
      name: 'Датчик загазованности',
      location: 'Цех №1, участок А',
      value: 0.02,
      unit: 'ppm',
      status: 'normal',
      lastUpdate: new Date().toISOString()
    },
    {
      id: '2', 
      name: 'Уровень шума',
      location: 'Цех №2, линия В',
      value: 85,
      unit: 'дБ',
      status: 'warning',
      lastUpdate: new Date().toISOString()
    },
    {
      id: '3',
      name: 'Температура',
      location: 'Склад материалов',
      value: 45,
      unit: '°C',
      status: 'critical',
      lastUpdate: new Date().toISOString()
    },
    {
      id: '4',
      name: 'Освещенность',
      location: 'Офисная зона',
      value: 520,
      unit: 'лк',
      status: 'normal',
      lastUpdate: new Date().toISOString()
    }
  ]);

  const [autoAlerts] = useState<AutoAlert[]>([
    {
      id: '1',
      title: 'Превышение допустимого уровня шума',
      severity: 'high',
      timestamp: '2024-01-28 14:23:15',
      location: 'Цех №2, линия В',
      status: 'active',
      autoGenerated: true
    },
    {
      id: '2',
      title: 'Критическое превышение температуры',
      severity: 'critical',
      timestamp: '2024-01-28 14:15:42',
      location: 'Склад материалов',
      status: 'acknowledged',
      autoGenerated: true
    },
    {
      id: '3',
      title: 'Обнаружение газа выше нормы',
      severity: 'medium',
      timestamp: '2024-01-28 13:45:22',
      location: 'Цех №1, участок А',
      status: 'resolved',
      autoGenerated: true
    }
  ]);

  const [reports] = useState<ComplianceReport[]>([
    {
      id: '1',
      title: 'Ежедневный отчет по безопасности',
      type: 'daily',
      generatedAt: '2024-01-28 09:00:00',
      status: 'ready',
      compliance: 94
    },
    {
      id: '2',
      title: 'Недельный анализ инцидентов',
      type: 'weekly',
      generatedAt: '2024-01-28 08:30:00',
      status: 'ready',
      compliance: 89
    },
    {
      id: '3',
      title: 'Месячный отчет соответствия',
      type: 'monthly',
      generatedAt: '2024-01-28 07:00:00',
      status: 'processing',
      compliance: 0
    }
  ]);

  const [notifications] = useState<NotificationChannel[]>([
    {
      id: '1',
      name: 'Критические алерты Telegram',
      type: 'telegram',
      status: 'active',
      lastUsed: '2024-01-28 14:23:15',
      config: {
        endpoint: '@safety_alerts_bot',
        recipients: ['Администратор', 'Начальник охраны труда']
      }
    },
    {
      id: '2',
      name: 'SMS экстренные уведомления',
      type: 'sms',
      status: 'active',
      lastUsed: '2024-01-28 14:15:42',
      config: {
        recipients: ['+7 XXX XXX-XX-01', '+7 XXX XXX-XX-02']
      }
    },
    {
      id: '3',
      name: 'Email отчеты',
      type: 'email',
      status: 'active',
      lastUsed: '2024-01-28 09:00:00',
      config: {
        recipients: ['safety@ht-systems.ru', 'admin@ht-systems.ru']
      }
    },
    {
      id: '4',
      name: 'Интеграция с 1С',
      type: 'webhook',
      status: 'inactive',
      lastUsed: '2024-01-27 18:30:00',
      config: {
        endpoint: 'https://1c.ht-systems.ru/api/safety'
      }
    }
  ]);

  const [mlPredictions] = useState<MLPrediction[]>([
    {
      id: '1',
      type: 'incident_risk',
      confidence: 87,
      prediction: 'Высокий риск травмы в цехе №2',
      timeframe: 'Ближайшие 48 часов',
      factors: ['Повышенный уровень шума', 'Нарушение графика обслуживания'],
      createdAt: '2024-01-28 14:30:00'
    },
    {
      id: '2',
      type: 'equipment_failure',
      confidence: 92,
      prediction: 'Отказ системы вентиляции',
      timeframe: 'Ближайшая неделя',
      factors: ['Превышение рабочих часов', 'Отклонения в вибрации'],
      createdAt: '2024-01-28 13:45:00'
    },
    {
      id: '3',
      type: 'safety_trend',
      confidence: 78,
      prediction: 'Ухудшение показателей безопасности',
      timeframe: 'Следующий месяц',
      factors: ['Увеличение нагрузки', 'Недостаточное обучение'],
      createdAt: '2024-01-28 12:15:00'
    }
  ]);

  const [integrations] = useState<Integration[]>([
    {
      id: '1',
      name: '1С:Предприятие',
      type: '1c',
      status: 'connected',
      lastSync: '2024-01-28 14:00:00',
      dataExchanged: 1247
    },
    {
      id: '2',
      name: 'SAP ERP',
      type: 'sap',
      status: 'syncing',
      lastSync: '2024-01-28 13:30:00',
      dataExchanged: 892
    },
    {
      id: '3',
      name: 'Система контроля доступа',
      type: 'external_api',
      status: 'connected',
      lastSync: '2024-01-28 14:25:00',
      dataExchanged: 345
    }
  ]);

  const [userRoles] = useState<UserRole[]>([
    {
      id: '1',
      name: 'Администратор',
      level: 'admin',
      permissions: ['view_all', 'edit_all', 'manage_users', 'system_config'],
      dashboardConfig: {
        widgets: ['monitoring', 'alerts', 'analytics', 'reports', 'ml', 'integrations'],
        alertLevel: 'all',
        dataAccess: ['all_sensors', 'all_departments', 'financial_data']
      }
    },
    {
      id: '2',
      name: 'Главный инженер',
      level: 'engineer',
      permissions: ['view_all', 'edit_sensors', 'manage_alerts'],
      dashboardConfig: {
        widgets: ['monitoring', 'alerts', 'analytics'],
        alertLevel: 'all',
        dataAccess: ['all_sensors', 'technical_data']
      }
    },
    {
      id: '3',
      name: 'Оператор',
      level: 'operator',
      permissions: ['view_monitoring', 'acknowledge_alerts'],
      dashboardConfig: {
        widgets: ['monitoring', 'alerts'],
        alertLevel: 'critical',
        dataAccess: ['assigned_sensors']
      }
    },
    {
      id: '4',
      name: 'Руководитель',
      level: 'manager',
      permissions: ['view_reports', 'view_analytics'],
      dashboardConfig: {
        widgets: ['analytics', 'reports'],
        alertLevel: 'critical',
        dataAccess: ['summary_data', 'financial_data']
      }
    }
  ]);

  const [quickActions] = useState<QuickAction[]>([
    {
      id: '1',
      title: 'Экстренная остановка',
      description: 'Остановить все оборудование',
      type: 'emergency',
      icon: 'AlertTriangle',
      requiresConfirmation: true,
      userLevels: ['admin', 'engineer']
    },
    {
      id: '2',
      title: 'Оповещение персонала',
      description: 'Отправить уведомление всем',
      type: 'notification',
      icon: 'Megaphone',
      requiresConfirmation: true,
      userLevels: ['admin', 'manager']
    },
    {
      id: '3',
      title: 'Создать отчет',
      description: 'Генерация экстренного отчета',
      type: 'report',
      icon: 'FileText',
      requiresConfirmation: false,
      userLevels: ['admin', 'manager', 'engineer']
    },
    {
      id: '4',
      title: 'Запланировать ТО',
      description: 'Создать задачу на обслуживание',
      type: 'maintenance',
      icon: 'Wrench',
      requiresConfirmation: false,
      userLevels: ['admin', 'engineer']
    }
  ]);

  // Симуляция обновления данных в реальном времени
  useEffect(() => {
    const interval = setInterval(() => {
      setRealTimeData(prev => prev.map(sensor => ({
        ...sensor,
        value: sensor.value + (Math.random() - 0.5) * 0.1,
        lastUpdate: new Date().toISOString()
      })));
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'normal': return 'text-green-600 bg-green-100';
      case 'warning': return 'text-yellow-600 bg-yellow-100';
      case 'critical': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'low': return 'bg-blue-100 text-blue-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'high': return 'bg-orange-100 text-orange-800';
      case 'critical': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getAlertStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-red-100 text-red-800';
      case 'acknowledged': return 'bg-blue-100 text-blue-800';
      case 'resolved': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getNotificationStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'text-green-600 bg-green-100';
      case 'inactive': return 'text-gray-600 bg-gray-100';
      case 'error': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getIntegrationStatusColor = (status: string) => {
    switch (status) {
      case 'connected': return 'text-green-600 bg-green-100';
      case 'disconnected': return 'text-red-600 bg-red-100';
      case 'syncing': return 'text-blue-600 bg-blue-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 90) return 'text-green-600';
    if (confidence >= 70) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getActionColor = (type: string) => {
    switch (type) {
      case 'emergency': return 'bg-red-600 hover:bg-red-700 text-white';
      case 'notification': return 'bg-blue-600 hover:bg-blue-700 text-white';
      case 'report': return 'bg-green-600 hover:bg-green-700 text-white';
      case 'maintenance': return 'bg-orange-600 hover:bg-orange-700 text-white';
      default: return 'bg-gray-600 hover:bg-gray-700 text-white';
    }
  };

  const hasPermission = (permission: string) => {
    return currentUser.role.permissions.includes(permission) || currentUser.role.permissions.includes('view_all');
  };

  const canAccessWidget = (widget: string) => {
    return currentUser.role.dashboardConfig.widgets.includes(widget);
  };

  const availableActions = quickActions.filter(action => 
    action.userLevels.includes(currentUser.role.level)
  );

  const activeAlerts = autoAlerts.filter(alert => alert.status === 'active').length;
  const criticalSensors = realTimeData.filter(sensor => sensor.status === 'critical').length;
  const averageCompliance = Math.round(reports.filter(r => r.compliance > 0).reduce((acc, r) => acc + r.compliance, 0) / reports.filter(r => r.compliance > 0).length);
  const activeNotifications = notifications.filter(n => n.status === 'active').length;
  const connectedIntegrations = integrations.filter(i => i.status === 'connected').length;

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Mobile Header */}
      {isMobile && (
        <div className="bg-white border-b border-gray-200 px-4 py-3 flex items-center justify-between sticky top-0 z-50">
          <div className="flex items-center space-x-3">
            <Avatar className="h-8 w-8">
              <AvatarImage src={currentUser.avatar} />
              <AvatarFallback>{currentUser.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>
            </Avatar>
            <div>
              <div className="font-medium text-sm">{currentUser.name}</div>
              <div className="text-xs text-gray-500">{currentUser.role.name}</div>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <Sheet>
              <SheetTrigger asChild>
                <Button variant="outline" size="sm">
                  <Icon name="Zap" className="h-4 w-4" />
                </Button>
              </SheetTrigger>
              <SheetContent side="bottom" className="h-[80vh]">
                <SheetHeader>
                  <SheetTitle>Быстрые действия</SheetTitle>
                  <SheetDescription>
                    Оперативное управление системой
                  </SheetDescription>
                </SheetHeader>
                <div className="grid grid-cols-1 gap-4 mt-6">
                  {availableActions.map((action) => (
                    <Button
                      key={action.id}
                      className={`${getActionColor(action.type)} h-16 flex-col space-y-1`}
                      onClick={() => {
                        if (action.requiresConfirmation) {
                          if (confirm(`Вы уверены, что хотите ${action.title.toLowerCase()}?`)) {
                            console.log(`Выполняем ${action.title}`);
                          }
                        } else {
                          console.log(`Выполняем ${action.title}`);
                        }
                      }}
                    >
                      <Icon name={action.icon as any} className="h-6 w-6" />
                      <div className="text-center">
                        <div className="font-medium">{action.title}</div>
                        <div className="text-xs opacity-90">{action.description}</div>
                      </div>
                    </Button>
                  ))}
                </div>
              </SheetContent>
            </Sheet>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" size="sm">
                  <Icon name="Menu" className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-56">
                <DropdownMenuLabel>Меню</DropdownMenuLabel>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <Icon name="User" className="mr-2 h-4 w-4" />
                  Профиль
                </DropdownMenuItem>
                <DropdownMenuItem>
                  <Icon name="Settings" className="mr-2 h-4 w-4" />
                  Настройки
                </DropdownMenuItem>
                <DropdownMenuItem>
                  <Icon name="Shield" className="mr-2 h-4 w-4" />
                  Безопасность
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <Icon name="LogOut" className="mr-2 h-4 w-4" />
                  Выйти
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>
      )}

      <div className={`max-w-7xl mx-auto ${isMobile ? 'p-4' : 'p-6'}`}>
        {/* Header */}
        {!isMobile && (
          <div className="mb-8 flex justify-between items-start">
            <div>
              <h1 className="text-4xl font-bold text-gray-900 mb-2">
                АСУБТ - Автоматизированная система управления безопасностью труда
              </h1>
              <p className="text-lg text-gray-600">
                Комплексный мониторинг и управление системами безопасности промышленного предприятия
              </p>
            </div>
            <div className="flex items-center space-x-4">
              <div className="text-right">
                <div className="text-sm text-gray-500">Online: {currentUser.name}</div>
                <div className="text-xs text-gray-400">{currentUser.role.name}</div>
              </div>
              <Avatar>
                <AvatarImage src={currentUser.avatar} />
                <AvatarFallback>{currentUser.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>
              </Avatar>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline">
                    <Icon name="Menu" className="h-4 w-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-56">
                  <DropdownMenuLabel>Меню пользователя</DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem>
                    <Icon name="User" className="mr-2 h-4 w-4" />
                    Профиль
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <Icon name="Settings" className="mr-2 h-4 w-4" />
                    Настройки
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <Icon name="Shield" className="mr-2 h-4 w-4" />
                    Управление ролями
                  </DropdownMenuItem>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem>
                    <Icon name="LogOut" className="mr-2 h-4 w-4" />
                    Выйти
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        )}

        {/* Critical Alerts Banner */}
        {activeAlerts > 0 && (
          <Alert className="mb-6 border-red-200 bg-red-50">
            <Icon name="AlertTriangle" className="h-4 w-4 text-red-600" />
            <AlertTitle className="text-red-800">Критические уведомления</AlertTitle>
            <AlertDescription className="text-red-700">
              Обнаружено {activeAlerts} активных критических уведомлений, требующих немедленного внимания.
              <Button variant="link" className="p-0 h-auto text-red-700 underline ml-2">
                Просмотреть все
              </Button>
            </AlertDescription>
          </Alert>
        )}

        {/* Dashboard Overview */}
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-8">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Активные датчики</CardTitle>
              <Icon name="Wifi" className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-primary">{realTimeData.length}</div>
              <p className="text-xs text-muted-foreground mt-1">
                В сети
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Критические</CardTitle>
              <Icon name="AlertCircle" className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-red-600">{criticalSensors}</div>
              <p className="text-xs text-muted-foreground mt-1">
                Состояния
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Алерты</CardTitle>
              <Icon name="Bell" className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-orange-600">{activeAlerts}</div>
              <p className="text-xs text-muted-foreground mt-1">
                Активные
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Уведомления</CardTitle>
              <Icon name="MessageSquare" className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-blue-600">{activeNotifications}</div>
              <p className="text-xs text-muted-foreground mt-1">
                Каналов
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Интеграции</CardTitle>
              <Icon name="Plug" className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-purple-600">{connectedIntegrations}</div>
              <p className="text-xs text-muted-foreground mt-1">
                Подключено
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Соответствие</CardTitle>
              <Icon name="TrendingUp" className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-green-600">{averageCompliance}%</div>
              <p className="text-xs text-muted-foreground mt-1">
                Нормам
              </p>
            </CardContent>
          </Card>
        </div>

        <Tabs defaultValue="monitoring" className="space-y-6">
          <TabsList className={`grid w-full ${isMobile ? 'grid-cols-3' : 'grid-cols-7'}`}>
            {canAccessWidget('monitoring') && (
              <TabsTrigger value="monitoring" className="flex items-center space-x-1">
                <Icon name="Activity" className="h-4 w-4" />
                <span className={isMobile ? "text-xs" : "hidden sm:inline"}>Мониторинг</span>
              </TabsTrigger>
            )}
            {canAccessWidget('alerts') && (
              <TabsTrigger value="alerts" className="flex items-center space-x-1">
                <Icon name="Bell" className="h-4 w-4" />
                <span className={isMobile ? "text-xs" : "hidden sm:inline"}>Алерты</span>
              </TabsTrigger>
            )}
            {canAccessWidget('notifications') && hasPermission('manage_alerts') && (
              <TabsTrigger value="notifications" className="flex items-center space-x-1">
                <Icon name="MessageSquare" className="h-4 w-4" />
                <span className={isMobile ? "text-xs" : "hidden sm:inline"}>Уведомления</span>
              </TabsTrigger>
            )}
            {canAccessWidget('ml') && hasPermission('view_all') && (
              <TabsTrigger value="ml" className="flex items-center space-x-1">
                <Icon name="Brain" className="h-4 w-4" />
                <span className={isMobile ? "text-xs" : "hidden sm:inline"}>ML</span>
              </TabsTrigger>
            )}
            {canAccessWidget('integrations') && hasPermission('system_config') && (
              <TabsTrigger value="integrations" className="flex items-center space-x-1">
                <Icon name="Plug" className="h-4 w-4" />
                <span className={isMobile ? "text-xs" : "hidden sm:inline"}>Интеграции</span>
              </TabsTrigger>
            )}
            {canAccessWidget('analytics') && (
              <TabsTrigger value="analytics" className="flex items-center space-x-1">
                <Icon name="BarChart3" className="h-4 w-4" />
                <span className={isMobile ? "text-xs" : "hidden sm:inline"}>Аналитика</span>
              </TabsTrigger>
            )}
            {hasPermission('manage_users') && (
              <TabsTrigger value="roles" className="flex items-center space-x-1">
                <Icon name="Users" className="h-4 w-4" />
                <span className={isMobile ? "text-xs" : "hidden sm:inline"}>Роли</span>
              </TabsTrigger>
            )}
          </TabsList>

          {/* Real-time Monitoring */}
          <TabsContent value="monitoring" className="space-y-4">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold text-gray-900">
                Мониторинг в реальном времени
              </h2>
              <div className="flex items-center space-x-2">
                <Button variant="outline" size="sm">
                  <Icon name="Download" className="h-4 w-4 mr-2" />
                  Экспорт данных
                </Button>
                <Button variant="outline" size="sm">
                  <Icon name="RefreshCw" className="h-4 w-4 mr-2" />
                  Обновить
                </Button>
              </div>
            </div>

            <div className="grid gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Показания датчиков</CardTitle>
                  <CardDescription>
                    Данные обновляются автоматически каждые 5 секунд
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Датчик</TableHead>
                        <TableHead>Местоположение</TableHead>
                        <TableHead>Значение</TableHead>
                        <TableHead>Статус</TableHead>
                        <TableHead>Обновлено</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {realTimeData.map((sensor) => (
                        <TableRow key={sensor.id}>
                          <TableCell className="font-medium">{sensor.name}</TableCell>
                          <TableCell>{sensor.location}</TableCell>
                          <TableCell>
                            <span className="font-mono">
                              {sensor.value.toFixed(2)} {sensor.unit}
                            </span>
                          </TableCell>
                          <TableCell>
                            <Badge className={getStatusColor(sensor.status)}>
                              {sensor.status}
                            </Badge>
                          </TableCell>
                          <TableCell className="text-sm text-gray-500">
                            {new Date(sensor.lastUpdate).toLocaleTimeString('ru-RU')}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Auto Alerts */}
          <TabsContent value="alerts" className="space-y-4">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold text-gray-900">
                Автоматические уведомления
              </h2>
              <Button>
                <Icon name="Settings" className="h-4 w-4 mr-2" />
                Настроить правила
              </Button>
            </div>

            <div className="grid gap-4">
              {autoAlerts.map((alert) => (
                <Card key={alert.id} className={`border-l-4 ${
                  alert.severity === 'critical' ? 'border-l-red-500' :
                  alert.severity === 'high' ? 'border-l-orange-500' :
                  alert.severity === 'medium' ? 'border-l-yellow-500' :
                  'border-l-blue-500'
                }`}>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <Icon name="Zap" className="h-5 w-5 text-primary" />
                        <CardTitle className="text-lg">{alert.title}</CardTitle>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Badge className={getSeverityColor(alert.severity)}>
                          {alert.severity}
                        </Badge>
                        <Badge className={getAlertStatusColor(alert.status)}>
                          {alert.status}
                        </Badge>
                        {alert.autoGenerated && (
                          <Badge variant="outline" className="text-xs">
                            Авто
                          </Badge>
                        )}
                      </div>
                    </div>
                    <CardDescription>
                      <div className="flex items-center space-x-4 text-sm">
                        <span>📍 {alert.location}</span>
                        <span>🕐 {alert.timestamp}</span>
                      </div>
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="flex justify-end space-x-2">
                      <Button variant="outline" size="sm">
                        <Icon name="Eye" className="h-4 w-4 mr-2" />
                        Подробности
                      </Button>
                      {alert.status === 'active' && (
                        <Button size="sm">
                          <Icon name="Check" className="h-4 w-4 mr-2" />
                          Подтвердить
                        </Button>
                      )}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* External Notifications */}
          <TabsContent value="notifications" className="space-y-4">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold text-gray-900">
                Внешние уведомления
              </h2>
              <Button>
                <Icon name="Plus" className="h-4 w-4 mr-2" />
                Новый канал
              </Button>
            </div>

            <div className="grid gap-4">
              {notifications.map((channel) => (
                <Card key={channel.id}>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <Icon name={
                          channel.type === 'telegram' ? 'MessageCircle' :
                          channel.type === 'sms' ? 'Phone' :
                          channel.type === 'email' ? 'Mail' : 'Webhook'
                        } className="h-5 w-5 text-primary" />
                        <CardTitle className="text-lg">{channel.name}</CardTitle>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Badge className={getNotificationStatusColor(channel.status)}>
                          {channel.status}
                        </Badge>
                        <Badge variant="outline" className="capitalize">
                          {channel.type}
                        </Badge>
                      </div>
                    </div>
                    <CardDescription>
                      Последнее использование: {channel.lastUsed}
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      {channel.config.recipients && (
                        <div>
                          <span className="text-sm font-medium text-gray-600">Получатели:</span>
                          <div className="flex flex-wrap gap-1 mt-1">
                            {channel.config.recipients.map((recipient, index) => (
                              <Badge key={index} variant="secondary" className="text-xs">
                                {recipient}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      )}
                      {channel.config.endpoint && (
                        <div>
                          <span className="text-sm font-medium text-gray-600">Endpoint:</span>
                          <code className="ml-2 text-xs bg-gray-100 px-2 py-1 rounded">
                            {channel.config.endpoint}
                          </code>
                        </div>
                      )}
                    </div>
                    <div className="flex justify-end space-x-2 mt-4">
                      <Button variant="outline" size="sm">
                        <Icon name="Settings" className="h-4 w-4 mr-2" />
                        Настроить
                      </Button>
                      <Button variant="outline" size="sm">
                        <Icon name="Send" className="h-4 w-4 mr-2" />
                        Тест
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Machine Learning Predictions */}
          <TabsContent value="ml" className="space-y-4">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold text-gray-900">
                Машинное обучение и прогнозы
              </h2>
              <Button>
                <Icon name="RefreshCw" className="h-4 w-4 mr-2" />
                Обновить модель
              </Button>
            </div>

            <div className="grid gap-4">
              {mlPredictions.map((prediction) => (
                <Card key={prediction.id} className="border-l-4 border-l-purple-500">
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <Icon name="Brain" className="h-5 w-5 text-purple-600" />
                        <CardTitle className="text-lg">{prediction.prediction}</CardTitle>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Badge variant="outline" className="capitalize">
                          {prediction.type.replace('_', ' ')}
                        </Badge>
                        <Badge className={`${getConfidenceColor(prediction.confidence)} bg-opacity-10`}>
                          {prediction.confidence}% точность
                        </Badge>
                      </div>
                    </div>
                    <CardDescription>
                      Прогноз на: {prediction.timeframe} | Создан: {prediction.createdAt}
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      <div>
                        <span className="text-sm font-medium text-gray-600">Ключевые факторы:</span>
                        <div className="flex flex-wrap gap-2 mt-2">
                          {prediction.factors.map((factor, index) => (
                            <Badge key={index} variant="secondary" className="text-xs">
                              {factor}
                            </Badge>
                          ))}
                        </div>
                      </div>
                      <div className="flex justify-end space-x-2">
                        <Button variant="outline" size="sm">
                          <Icon name="TrendingUp" className="h-4 w-4 mr-2" />
                          Детали анализа
                        </Button>
                        <Button size="sm">
                          <Icon name="AlertTriangle" className="h-4 w-4 mr-2" />
                          Создать задачу
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Integrations */}
          <TabsContent value="integrations" className="space-y-4">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold text-gray-900">
                Интеграции с корпоративными системами
              </h2>
              <Button>
                <Icon name="Plus" className="h-4 w-4 mr-2" />
                Новая интеграция
              </Button>
            </div>

            <div className="grid gap-4">
              {integrations.map((integration) => (
                <Card key={integration.id}>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <Icon name={
                          integration.type === '1c' ? 'Database' :
                          integration.type === 'sap' ? 'Building' :
                          integration.type === 'erp' ? 'Factory' : 'Globe'
                        } className="h-5 w-5 text-primary" />
                        <CardTitle className="text-lg">{integration.name}</CardTitle>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Badge className={getIntegrationStatusColor(integration.status)}>
                          {integration.status}
                        </Badge>
                        <Badge variant="outline" className="uppercase">
                          {integration.type}
                        </Badge>
                      </div>
                    </div>
                    <CardDescription>
                      Последняя синхронизация: {integration.lastSync}
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        <div className="text-center">
                          <div className="text-2xl font-bold text-primary">{integration.dataExchanged}</div>
                          <div className="text-xs text-gray-500">Записей обменяно</div>
                        </div>
                        {integration.status === 'syncing' && (
                          <div className="flex items-center space-x-2">
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary"></div>
                            <span className="text-sm text-blue-600">Синхронизация...</span>
                          </div>
                        )}
                      </div>
                      <div className="flex space-x-2">
                        <Button variant="outline" size="sm">
                          <Icon name="Settings" className="h-4 w-4 mr-2" />
                          Настроить
                        </Button>
                        <Button variant="outline" size="sm">
                          <Icon name="RefreshCw" className="h-4 w-4 mr-2" />
                          Синхронизировать
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* User Roles */}
          <TabsContent value="roles" className="space-y-4">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold text-gray-900">
                Управление ролями и доступом
              </h2>
              <Button>
                <Icon name="Plus" className="h-4 w-4 mr-2" />
                Создать роль
              </Button>
            </div>

            <div className="grid gap-4">
              {userRoles.map((role) => (
                <Card key={role.id}>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <Icon name="Shield" className="h-5 w-5 text-primary" />
                        <CardTitle className="text-lg">{role.name}</CardTitle>
                      </div>
                      <Badge variant="outline" className="capitalize">
                        {role.level}
                      </Badge>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div>
                        <span className="text-sm font-medium text-gray-600">Права доступа:</span>
                        <div className="flex flex-wrap gap-1 mt-1">
                          {role.permissions.map((permission, index) => (
                            <Badge key={index} variant="secondary" className="text-xs">
                              {permission.replace('_', ' ')}
                            </Badge>
                          ))}
                        </div>
                      </div>
                      <div>
                        <span className="text-sm font-medium text-gray-600">Доступные виджеты:</span>
                        <div className="flex flex-wrap gap-1 mt-1">
                          {role.dashboardConfig.widgets.map((widget, index) => (
                            <Badge key={index} variant="outline" className="text-xs">
                              {widget}
                            </Badge>
                          ))}
                        </div>
                      </div>
                      <div className="flex justify-between items-center">
                        <div>
                          <span className="text-sm font-medium text-gray-600">Уровень алертов: </span>
                          <Badge className={role.dashboardConfig.alertLevel === 'all' ? 'bg-blue-100 text-blue-800' : 'bg-orange-100 text-orange-800'}>
                            {role.dashboardConfig.alertLevel}
                          </Badge>
                        </div>
                        <div className="flex space-x-2">
                          <Button variant="outline" size="sm">
                            <Icon name="Edit" className="h-4 w-4 mr-2" />
                            Редактировать
                          </Button>
                          <Button variant="outline" size="sm">
                            <Icon name="Users" className="h-4 w-4 mr-2" />
                            Назначить пользователям
                          </Button>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Analytics */}
          <TabsContent value="analytics" className="space-y-4">
            <h2 className="text-2xl font-bold text-gray-900">
              Интеллектуальная аналитика
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Тренды безопасности</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Январь 2024</span>
                      <div className="flex items-center space-x-2">
                        <Progress value={94} className="w-20" />
                        <span className="text-sm font-medium">94%</span>
                        <Icon name="TrendingUp" className="h-4 w-4 text-green-600" />
                      </div>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Декабрь 2023</span>
                      <div className="flex items-center space-x-2">
                        <Progress value={89} className="w-20" />
                        <span className="text-sm font-medium">89%</span>
                        <Icon name="TrendingUp" className="h-4 w-4 text-green-600" />
                      </div>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Ноябрь 2023</span>
                      <div className="flex items-center space-x-2">
                        <Progress value={78} className="w-20" />
                        <span className="text-sm font-medium">78%</span>
                        <Icon name="TrendingDown" className="h-4 w-4 text-red-600" />
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Эффективность АСУБТ</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex justify-between items-center">
                      <span className="text-sm">Автоматических проверок</span>
                      <Badge variant="outline">1,247</Badge>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm">Предотвращенных инцидентов</span>
                      <Badge variant="outline">89</Badge>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm">Время реакции (сек)</span>
                      <Badge variant="outline">2.3</Badge>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm">Точность прогнозов</span>
                      <Badge variant="outline">96.7%</Badge>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};

export default Index;