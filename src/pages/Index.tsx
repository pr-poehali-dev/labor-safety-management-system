import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import Icon from '@/components/ui/icon';

interface SensorData {
  id: string;
  name: string;
  location: string;
  value: number;
  unit: string;
  status: 'normal' | 'warning' | 'critical';
  lastUpdate: string;
}

interface AutoAlert {
  id: string;
  title: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  timestamp: string;
  location: string;
  status: 'active' | 'acknowledged' | 'resolved';
  autoGenerated: boolean;
}

interface ComplianceReport {
  id: string;
  title: string;
  type: 'daily' | 'weekly' | 'monthly';
  generatedAt: string;
  status: 'generated' | 'processing' | 'ready';
  compliance: number;
}

const Index = () => {
  const [realTimeData, setRealTimeData] = useState<SensorData[]>([
    {
      id: '1',
      name: 'Датчик загазованности',
      location: 'Цех №1, участок А',
      value: 0.02,
      unit: 'ppm',
      status: 'normal',
      lastUpdate: new Date().toISOString()
    },
    {
      id: '2', 
      name: 'Уровень шума',
      location: 'Цех №2, линия В',
      value: 85,
      unit: 'дБ',
      status: 'warning',
      lastUpdate: new Date().toISOString()
    },
    {
      id: '3',
      name: 'Температура',
      location: 'Склад материалов',
      value: 45,
      unit: '°C',
      status: 'critical',
      lastUpdate: new Date().toISOString()
    },
    {
      id: '4',
      name: 'Освещенность',
      location: 'Офисная зона',
      value: 520,
      unit: 'лк',
      status: 'normal',
      lastUpdate: new Date().toISOString()
    }
  ]);

  const [autoAlerts] = useState<AutoAlert[]>([
    {
      id: '1',
      title: 'Превышение допустимого уровня шума',
      severity: 'high',
      timestamp: '2024-01-28 14:23:15',
      location: 'Цех №2, линия В',
      status: 'active',
      autoGenerated: true
    },
    {
      id: '2',
      title: 'Критическое превышение температуры',
      severity: 'critical',
      timestamp: '2024-01-28 14:15:42',
      location: 'Склад материалов',
      status: 'acknowledged',
      autoGenerated: true
    },
    {
      id: '3',
      title: 'Обнаружение газа выше нормы',
      severity: 'medium',
      timestamp: '2024-01-28 13:45:22',
      location: 'Цех №1, участок А',
      status: 'resolved',
      autoGenerated: true
    }
  ]);

  const [reports] = useState<ComplianceReport[]>([
    {
      id: '1',
      title: 'Ежедневный отчет по безопасности',
      type: 'daily',
      generatedAt: '2024-01-28 09:00:00',
      status: 'ready',
      compliance: 94
    },
    {
      id: '2',
      title: 'Недельный анализ инцидентов',
      type: 'weekly',
      generatedAt: '2024-01-28 08:30:00',
      status: 'ready',
      compliance: 89
    },
    {
      id: '3',
      title: 'Месячный отчет соответствия',
      type: 'monthly',
      generatedAt: '2024-01-28 07:00:00',
      status: 'processing',
      compliance: 0
    }
  ]);

  // Симуляция обновления данных в реальном времени
  useEffect(() => {
    const interval = setInterval(() => {
      setRealTimeData(prev => prev.map(sensor => ({
        ...sensor,
        value: sensor.value + (Math.random() - 0.5) * 0.1,
        lastUpdate: new Date().toISOString()
      })));
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'normal': return 'text-green-600 bg-green-100';
      case 'warning': return 'text-yellow-600 bg-yellow-100';
      case 'critical': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'low': return 'bg-blue-100 text-blue-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'high': return 'bg-orange-100 text-orange-800';
      case 'critical': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getAlertStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-red-100 text-red-800';
      case 'acknowledged': return 'bg-blue-100 text-blue-800';
      case 'resolved': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const activeAlerts = autoAlerts.filter(alert => alert.status === 'active').length;
  const criticalSensors = realTimeData.filter(sensor => sensor.status === 'critical').length;
  const averageCompliance = Math.round(reports.filter(r => r.compliance > 0).reduce((acc, r) => acc + r.compliance, 0) / reports.filter(r => r.compliance > 0).length);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b border-gray-200 shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-3">
              <Icon name="Activity" className="h-8 w-8 text-primary" />
              <div>
                <h1 className="text-xl font-semibold text-gray-900">
                  АСУБТ - ht-systems.ru
                </h1>
                <p className="text-sm text-gray-500">
                  Автоматическая система управления безопасностью труда
                </p>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                <span className="text-sm text-gray-600">Система активна</span>
              </div>
              <Badge variant="outline" className="text-sm">
                Администратор
              </Badge>
              <Button variant="outline" size="sm">
                <Icon name="Settings" className="h-4 w-4 mr-2" />
                Настройки
              </Button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Critical Alerts Banner */}
        {activeAlerts > 0 && (
          <Alert className="mb-6 border-red-200 bg-red-50">
            <Icon name="AlertTriangle" className="h-4 w-4 text-red-600" />
            <AlertTitle className="text-red-800">Критические уведомления</AlertTitle>
            <AlertDescription className="text-red-700">
              Обнаружено {activeAlerts} активных критических уведомлений, требующих немедленного внимания.
              <Button variant="link" className="p-0 h-auto text-red-700 underline ml-2">
                Просмотреть все
              </Button>
            </AlertDescription>
          </Alert>
        )}

        {/* Dashboard Overview */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Активные датчики</CardTitle>
              <Icon name="Wifi" className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-primary">{realTimeData.length}</div>
              <p className="text-xs text-muted-foreground mt-2">
                Все системы в сети
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Критические состояния</CardTitle>
              <Icon name="AlertCircle" className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-red-600">{criticalSensors}</div>
              <p className="text-xs text-muted-foreground mt-2">
                Требуют вмешательства
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Активные алерты</CardTitle>
              <Icon name="Bell" className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-orange-600">{activeAlerts}</div>
              <p className="text-xs text-muted-foreground mt-2">
                Ожидают обработки
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Соответствие нормам</CardTitle>
              <Icon name="TrendingUp" className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-green-600">{averageCompliance}%</div>
              <Progress value={averageCompliance} className="mt-2" />
              <p className="text-xs text-muted-foreground mt-2">
                Средний показатель
              </p>
            </CardContent>
          </Card>
        </div>

        {/* Main Tabs */}
        <Tabs defaultValue="monitoring" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="monitoring" className="flex items-center space-x-2">
              <Icon name="Activity" className="h-4 w-4" />
              <span>Мониторинг</span>
            </TabsTrigger>
            <TabsTrigger value="alerts" className="flex items-center space-x-2">
              <Icon name="Bell" className="h-4 w-4" />
              <span>Алерты</span>
            </TabsTrigger>
            <TabsTrigger value="reports" className="flex items-center space-x-2">
              <Icon name="FileText" className="h-4 w-4" />
              <span>Отчеты</span>
            </TabsTrigger>
            <TabsTrigger value="analytics" className="flex items-center space-x-2">
              <Icon name="BarChart3" className="h-4 w-4" />
              <span>Аналитика</span>
            </TabsTrigger>
          </TabsList>

          {/* Real-time Monitoring */}
          <TabsContent value="monitoring" className="space-y-4">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold text-gray-900">
                Мониторинг в реальном времени
              </h2>
              <div className="flex items-center space-x-2">
                <Button variant="outline" size="sm">
                  <Icon name="Download" className="h-4 w-4 mr-2" />
                  Экспорт данных
                </Button>
                <Button variant="outline" size="sm">
                  <Icon name="RefreshCw" className="h-4 w-4 mr-2" />
                  Обновить
                </Button>
              </div>
            </div>

            <div className="grid gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Показания датчиков</CardTitle>
                  <CardDescription>
                    Данные обновляются автоматически каждые 5 секунд
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Датчик</TableHead>
                        <TableHead>Местоположение</TableHead>
                        <TableHead>Значение</TableHead>
                        <TableHead>Статус</TableHead>
                        <TableHead>Обновлено</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {realTimeData.map((sensor) => (
                        <TableRow key={sensor.id}>
                          <TableCell className="font-medium">{sensor.name}</TableCell>
                          <TableCell>{sensor.location}</TableCell>
                          <TableCell>
                            <span className="font-mono">
                              {sensor.value.toFixed(2)} {sensor.unit}
                            </span>
                          </TableCell>
                          <TableCell>
                            <Badge className={getStatusColor(sensor.status)}>
                              {sensor.status}
                            </Badge>
                          </TableCell>
                          <TableCell className="text-sm text-gray-500">
                            {new Date(sensor.lastUpdate).toLocaleTimeString('ru-RU')}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Auto Alerts */}
          <TabsContent value="alerts" className="space-y-4">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold text-gray-900">
                Автоматические уведомления
              </h2>
              <Button>
                <Icon name="Settings" className="h-4 w-4 mr-2" />
                Настроить правила
              </Button>
            </div>

            <div className="grid gap-4">
              {autoAlerts.map((alert) => (
                <Card key={alert.id} className={`border-l-4 ${
                  alert.severity === 'critical' ? 'border-l-red-500' :
                  alert.severity === 'high' ? 'border-l-orange-500' :
                  alert.severity === 'medium' ? 'border-l-yellow-500' :
                  'border-l-blue-500'
                }`}>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <Icon name="Zap" className="h-5 w-5 text-primary" />
                        <CardTitle className="text-lg">{alert.title}</CardTitle>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Badge className={getSeverityColor(alert.severity)}>
                          {alert.severity}
                        </Badge>
                        <Badge className={getAlertStatusColor(alert.status)}>
                          {alert.status}
                        </Badge>
                        {alert.autoGenerated && (
                          <Badge variant="outline" className="text-xs">
                            Авто
                          </Badge>
                        )}
                      </div>
                    </div>
                    <CardDescription>
                      <div className="flex items-center space-x-4 text-sm">
                        <span>📍 {alert.location}</span>
                        <span>🕐 {alert.timestamp}</span>
                      </div>
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="flex justify-end space-x-2">
                      <Button variant="outline" size="sm">
                        <Icon name="Eye" className="h-4 w-4 mr-2" />
                        Подробности
                      </Button>
                      {alert.status === 'active' && (
                        <Button size="sm">
                          <Icon name="Check" className="h-4 w-4 mr-2" />
                          Подтвердить
                        </Button>
                      )}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Auto Reports */}
          <TabsContent value="reports" className="space-y-4">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold text-gray-900">
                Автогенерация отчетов
              </h2>
              <Button>
                <Icon name="Plus" className="h-4 w-4 mr-2" />
                Создать отчет
              </Button>
            </div>

            <div className="grid gap-4">
              {reports.map((report) => (
                <Card key={report.id}>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <CardTitle className="text-lg">{report.title}</CardTitle>
                      <div className="flex items-center space-x-2">
                        <Badge variant="outline" className="capitalize">
                          {report.type}
                        </Badge>
                        <Badge className={
                          report.status === 'ready' ? 'bg-green-100 text-green-800' :
                          report.status === 'processing' ? 'bg-blue-100 text-blue-800' :
                          'bg-gray-100 text-gray-800'
                        }>
                          {report.status}
                        </Badge>
                      </div>
                    </div>
                    <CardDescription>
                      Сгенерирован: {new Date(report.generatedAt).toLocaleString('ru-RU')}
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        {report.compliance > 0 && (
                          <div className="flex items-center space-x-2">
                            <span className="text-sm text-gray-600">Соответствие:</span>
                            <Progress value={report.compliance} className="w-20" />
                            <span className="text-sm font-medium">{report.compliance}%</span>
                          </div>
                        )}
                      </div>
                      <div className="flex space-x-2">
                        {report.status === 'ready' && (
                          <>
                            <Button variant="outline" size="sm">
                              <Icon name="Eye" className="h-4 w-4 mr-2" />
                              Просмотр
                            </Button>
                            <Button variant="outline" size="sm">
                              <Icon name="Download" className="h-4 w-4 mr-2" />
                              Скачать PDF
                            </Button>
                          </>
                        )}
                        {report.status === 'processing' && (
                          <Badge variant="outline" className="animate-pulse">
                            Обработка...
                          </Badge>
                        )}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Analytics */}
          <TabsContent value="analytics" className="space-y-4">
            <h2 className="text-2xl font-bold text-gray-900">
              Интеллектуальная аналитика
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Тренды безопасности</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Январь 2024</span>
                      <div className="flex items-center space-x-2">
                        <Progress value={94} className="w-20" />
                        <span className="text-sm font-medium">94%</span>
                        <Icon name="TrendingUp" className="h-4 w-4 text-green-600" />
                      </div>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Декабрь 2023</span>
                      <div className="flex items-center space-x-2">
                        <Progress value={89} className="w-20" />
                        <span className="text-sm font-medium">89%</span>
                        <Icon name="TrendingUp" className="h-4 w-4 text-green-600" />
                      </div>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Ноябрь 2023</span>
                      <div className="flex items-center space-x-2">
                        <Progress value={78} className="w-20" />
                        <span className="text-sm font-medium">78%</span>
                        <Icon name="TrendingDown" className="h-4 w-4 text-red-600" />
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Эффективность АСУБТ</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex justify-between items-center">
                      <span className="text-sm">Автоматических проверок</span>
                      <Badge variant="outline">1,247</Badge>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm">Предотвращенных инцидентов</span>
                      <Badge variant="outline">89</Badge>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm">Время реакции (сек)</span>
                      <Badge variant="outline">2.3</Badge>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm">Точность прогнозов</span>
                      <Badge variant="outline">96.7%</Badge>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </main>
    </div>
  );
};

export default Index;